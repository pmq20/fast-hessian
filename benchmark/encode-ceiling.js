/**!
 * hessian.js - benchmark/encode.js
 *
 * Copyright(c) fengmk2 and other contributors.
 * MIT Licensed
 *
 * Authors:
 *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)
 */

'use strict';

/**
 * Module dependencies.
 */

var ByteBuffer = require('byte');
var Benchmark = require('benchmark');
var benchmarks = require('beautify-benchmark');
var java = require('js-to-java');
var hessian = require('../');

var suite = new Benchmark.Suite();

var simpleObject = {
  $class: 'com.hessiantest.org.MockRequest',
  $: {
    id: 123,
    name: 'getData',
    args: [1, "name", "xxx1231231231231xxx123"]
  }
};

var complexObject = {
  $class: 'com.hessiantest.org.MockRequest',
  $: {
    id: 123,
    name: 'getData',
    args: [1, "name", "xxx1231231231231xxx123"],
    conn: {
      $class: 'com.hessiantest.org.MockRequestConnection',
      $: {
        ctx: java.long(1024)
      }
    }
  }
};

suite

.add('hessian2 encode: number', function() {
  var x = new Buffer([0x91]);
})

.add('hessian2 encode: date', function() {
  var x = new Buffer([0x4a, 0x00, 0x00, 0x01, 0x5b, 0xeb, 0xb9, 0x6c, 0x74]);
})

.add('hessian2 encode: long', function() {
  var x = new Buffer([0xf9, 0x2c]);
})

.add('hessian2 encode: string', function() {
  var x = new Buffer([0x16, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33]);
})

.add('hessian2 encode: [1, 2, 3]', function() {
  var x = new Buffer([0x7b, 0x91, 0x92, 0x93]);
})
.add('hessian2 encode array', function() {
  var x = new Buffer([0x7b, 0x91, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x16, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33]);
})

.add('hessian2 encode: simple object', function() {
  var x = new Buffer([0x43, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x93, 0x02, 0x69, 0x64, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x04, 0x61, 0x72, 0x67, 0x73, 0x60, 0xc8, 0x7b, 0x07, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x7b, 0x91, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x16, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33]);
})

.add('hessian2 encode: complex object', function() {
  var x = new Buffer([0x43, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x94, 0x02, 0x69, 0x64, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x04, 0x61, 0x72, 0x67, 0x73, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x60, 0xc8, 0x7b, 0x07, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x7b, 0x91, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x16, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x31, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x43, 0x30, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x91, 0x03, 0x63, 0x74, 0x78, 0x61, 0xfc, 0x00]);
})

.on('cycle', function(event) {
  benchmarks.add(event.target);
})
.on('start', function(event) {
  console.log('\n  Hessian Encode Benchmark\n  node version: %s, date: %s\n  Starting...',
    process.version, Date());
})
.on('complete', function done() {
  benchmarks.log();
})
.run({ 'async': false });
